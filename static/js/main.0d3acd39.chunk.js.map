{"version":3,"sources":["TodoItem.js","TodoList.js","serviceWorker.js","index.js"],"names":["TodoItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClickDelete","_this$props","deleteItem","index","bind","assertThisInitialized","content","react_default","a","createElement","onClick","Component","TodoList","handleInputChange","e","value","target","setState","inputValue","handleButtonClick","prevState","list","concat","toConsumableArray","handleItemDelete","splice","state","_this2","map","item","key","src_TodoItem","htmlFor","id","className","onChange","getTodoItem","Boolean","window","location","hostname","match","ReactDOM","render","src_TodoList","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAmBeA,cAhBX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGVQ,kBAAoB,WAAI,IAAAC,EAEUR,EAAKD,OACnCU,EAHoBD,EAEZC,YAFYD,EAEAE,QAJpBV,EAAKO,kBAAoBP,EAAKO,kBAAkBI,KAAvBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAFXA,wEASV,IACIa,EAAYV,KAAKJ,MAAjBc,QACR,OACIC,EAAAC,EAAAC,cAAA,OAAKC,QAAUd,KAAKI,mBAAqBM,UAb9BK,aCwERC,qBAtEX,SAAAA,EAAYpB,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgB,IACdnB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkB,GAAAb,KAAAH,KAAMJ,KASVqB,kBAAoB,SAACC,GACjB,IAAMC,EAAQD,EAAEE,OAAOD,MACvBtB,EAAKwB,SAAS,WACV,MAAO,CAAEC,WAAYH,MAbXtB,EAmBlB0B,kBAAoB,WAChB1B,EAAKwB,SAAS,SAACG,GAAD,MAAc,CACxBC,KAAI,GAAAC,OAAA5B,OAAA6B,EAAA,EAAA7B,CAAM0B,EAAUC,MAAhB,CAAsBD,EAAUF,aACpCA,WAAY,OAtBFzB,EA8BlB+B,iBAAmB,SAACrB,GAChBV,EAAKwB,SAAS,SAACG,GACX,IAAMC,EAAI3B,OAAA6B,EAAA,EAAA7B,CAAO0B,EAAUC,MAE3B,OADAA,EAAKI,OAAOtB,EAAO,GACZ,CAAEkB,WAhCb5B,EAAKiC,MAAQ,CACTR,WAAY,GACZG,KAAM,IAEV5B,EAAK0B,kBAAoB1B,EAAK0B,kBAAkBf,KAAvBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACzBA,EAAK+B,iBAAmB/B,EAAK+B,iBAAiBpB,KAAtBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACxBA,EAAKoB,kBAAoBpB,EAAKoB,kBAAkBT,KAAvBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KARXA,6EAwCJ,IAAAkC,EAAA/B,KACV,OAAQA,KAAK8B,MAAML,KAAKO,IAAI,SAACC,EAAM1B,GAC/B,OAEII,EAAAC,EAAAC,cAAA,OAAKqB,IAAK3B,GACNI,EAAAC,EAAAC,cAACsB,EAAD,CAAUD,IAAK3B,EAAOG,QAASuB,EAAM1B,MAAOA,EAAOD,WAAYyB,EAAKH,uDAYhF,OACIjB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOuB,QAAQ,cAAf,4BACAzB,EAAAC,EAAAC,cAAA,SAAOwB,GAAG,aAAaC,UAAU,QAAQnB,MAAQnB,KAAK8B,MAAMR,WAAaiB,SAAWvC,KAAKiB,oBACzFN,EAAAC,EAAAC,cAAA,UAAQC,QAAUd,KAAKuB,mBAAvB,gBACAZ,EAAAC,EAAAC,cAAA,UACKb,KAAKwC,uBAhEHzB,cCSH0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAAcC,SAASC,eAAe,SD2HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0d3acd39.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass TodoItem extends Component{\n    constructor(props){\n        super(props)\n        this.handleClickDelete = this.handleClickDelete.bind(this)\n    }\n    handleClickDelete = ()=>{\n        // 修改父组件内容\n        const { deleteItem, index } = this.props; \n        deleteItem(index)\n    }\n    render(){\n        const { content } = this.props;\n        return(\n            <div onClick={ this.handleClickDelete }>{content}</div>\n        )\n    }\n}\nexport default TodoItem;","import React, { Component }  from 'react';\nimport TodoItem from './TodoItem';\nimport './App.css';\nclass TodoList extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            inputValue: '',\n            list: []\n        }\n        this.handleButtonClick = this.handleButtonClick.bind(this);\n        this.handleItemDelete = this.handleItemDelete.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n    handleInputChange = (e) =>{\n        const value = e.target.value; \n        this.setState(()=>{\n            return { inputValue: value }\n        })\n        // this.setState({ \n        //     inputValue: value.target.value\n        // })\n    }\n    handleButtonClick = () =>{\n        this.setState((prevState)=>({\n            list: [...prevState.list, prevState.inputValue],\n            inputValue: ''\n        }))\n        // this.setState({\n        //     list: [...this.state.list, this.state.inputValue],\n        //     inputValue: ''\n        // })\n    }\n\n    handleItemDelete = (index) =>{\n        this.setState((prevState)=>{\n            const list = [...prevState.list]\n            list.splice(index, 1)\n            return { list }\n       })\n        // this.setState({\n        //     list: list\n        // })\n    }\n    getTodoItem() {\n        return (this.state.list.map((item, index)=>{\n            return(\n                // div的作用 包裹注释和JSX语法\n                <div key={index}>\n                    <TodoItem key={index} content={item} index={index} deleteItem={this.handleItemDelete } />\n                {/*li \n                key={index} \n                onClick={this.handleItemDelete.bind(this, index)} \n                dangerouslySetInnerHTML={{__html: item}}\n                >\n                </li>*/}\n                </div>\n            )\n        }))\n    }\n    render(){\n        return(\n            <div>\n                <label htmlFor=\"insertArea\">输入内容</label>\n                <input id=\"insertArea\" className=\"input\" value={ this.state.inputValue } onChange={ this.handleInputChange }/>\n                <button onClick={ this.handleButtonClick }>提交</button>\n                <ul>\n                    {this.getTodoItem()}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default TodoList;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoList from './TodoList';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TodoList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}